// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  username         String   @unique
  email            String?   @unique
  hashedPassword   String?
  bio              String?
  emailVerified    DateTime?
  image            String? // needed for Nextauth
  coverImage       String?
  profileImage     String?
  hasNotifications Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /* Relations */

    // Posts
    posts Post[] @relation("UserPosts")

    // Reposts
    reposts Repost[] @relation("UserReposts")

    // Likes
    likes Like[] @relation("UserLikes")

    // Followers
    followers Follow[] @relation("UserFollowers")

    // Following
    following Follow[] @relation("UserFollowing")

    // Comments
    comments Comment[] @relation("UserComments")

    // Notifications
    notifications Notification[] @relation("UserNotifications")
}

model Post {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  content  String
  mediaUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /* Relations */

    // User
    username String
    user   User   @relation("UserPosts", fields: [username], references: [username], onDelete: Cascade)

    // Reposts
    reposts Repost[] @relation("Reposts")

    // Likes
    likes Like[] @relation("Likes")

    // Comments
    comments Comment[] @relation("PostComments")
}

model Notification {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  read Boolean @default(false)

  createdAt DateTime @default(now())

  /* Relations */

    // User
    username String
    user   User   @relation("UserNotifications", fields: [username], references: [username], onDelete: Cascade)
}

model Repost {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /* Relations */

    // Post
    postId String @db.ObjectId
    post   Post   @relation("Reposts", fields: [postId], references: [id], onDelete: Cascade)

    // User
    username String
    user   User   @relation("UserReposts", fields: [username], references: [username], onDelete: Cascade)

    @@unique(name: "username_postId", [username, postId])
}

model Like {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())

  /* Relations */

    // Post
    postId String @db.ObjectId
    post   Post   @relation("Likes", fields: [postId], references: [id], onDelete: Cascade)

    // User
    username String
    user   User   @relation("UserLikes", fields: [username], references: [username], onDelete: Cascade)

    @@unique(name: "username_postId", [username, postId])
}

model Follow {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())

  /* Relations */

    // Follower
    followerUsername String
    follower   User   @relation("UserFollowing", fields: [followerUsername], references: [username], onDelete: Cascade)

    // Followee
    followeeUsername String
    followee   User   @relation("UserFollowers", fields: [followeeUsername], references: [username], onDelete: Cascade)

    @@unique(name: "followeeUsername_followerUsername", [followeeUsername, followerUsername])
}

model Comment {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  content     String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  /* Relations */
  
    // Post
    postId String? @db.ObjectId
    post   Post?   @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)

    // Comments
    comments Comment[] @relation("CommentParent")
    parentId String? @db.ObjectId
    parent   Comment?   @relation("CommentParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

    // User
    username String
    user   User   @relation("UserComments", fields: [username], references: [username], onDelete: Cascade)
}
